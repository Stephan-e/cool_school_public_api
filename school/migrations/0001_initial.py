# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2020-04-21 07:08
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import enumfields.fields
import taggit.managers
import school.enums
import school.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', enumfields.fields.EnumField(default='student', enum=school.enums.Role, max_length=50)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'school',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', school.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.BookingStatus, max_length=50)),
                ('teaching_record', models.CharField(blank=True, max_length=500, null=True)),
                ('attendance_status', enumfields.fields.EnumField(default='none', enum=school.enums.AttendanceStatus, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BookingRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('status', enumfields.fields.EnumField(default='request', enum=school.enums.Booking_Status, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('description', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('short_id', models.CharField(default='SP', max_length=5)),
                ('name', models.CharField(default='SP', max_length=50)),
                ('enrollments', models.IntegerField(blank=True, default=0, null=True)),
                ('active_students', models.IntegerField(blank=True, default=0, null=True)),
                ('inactive_students', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Camp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('name', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('description', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('location', models.CharField(max_length=100)),
                ('weeks', models.IntegerField(default=1)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.SessionStatus, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CampBooking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.BookingStatus, max_length=50)),
                ('teaching_record', models.CharField(blank=True, max_length=500, null=True)),
                ('attendance_status', enumfields.fields.EnumField(default='attended', enum=school.enums.AttendanceStatus, max_length=50)),
                ('lunch', models.BooleanField(default=False)),
                ('note', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CampSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('description', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('location', models.CharField(max_length=100)),
                ('club', models.CharField(blank=True, db_index=True, max_length=50)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.SessionStatus, max_length=50)),
                ('duration', models.DecimalField(decimal_places=2, max_digits=5)),
                ('session_type', enumfields.fields.EnumField(default='None', enum=school.enums.CampSessionType, max_length=50)),
                ('student_amount', models.IntegerField(default=0)),
                ('camp', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campsession', to='school.Camp')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CampWeek',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('name', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('week', models.IntegerField(default=1)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('camp', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campweek', to='school.Camp')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('location', models.CharField(blank=True, db_index=True, max_length=50)),
                ('language', models.CharField(blank=True, db_index=True, max_length=50)),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, db_index=True, max_length=50)),
                ('payment_status', enumfields.fields.EnumField(default='pending', enum=school.enums.PaymentStatus, max_length=50)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.ClientStatus, max_length=50)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClientNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('note', models.CharField(max_length=2000)),
                ('client', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='note', to='school.Client')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('badges', models.ManyToManyField(blank=True, to='school.Badge')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('hours_purchased', models.DecimalField(decimal_places=2, max_digits=5)),
                ('date_purchased', models.DateField(blank=True, null=True)),
                ('method', models.CharField(blank=True, db_index=True, max_length=50)),
                ('amount', models.IntegerField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='school.Client')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('location', models.CharField(max_length=100)),
                ('day', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('time', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('club', models.CharField(blank=True, db_index=True, max_length=50)),
                ('duration', models.DecimalField(decimal_places=2, max_digits=5)),
                ('student_amount', models.IntegerField(default=0)),
                ('session_type', enumfields.fields.EnumField(default='None', enum=school.enums.SessionType, max_length=50)),
                ('description', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.SessionStatus, max_length=50)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SessionNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('note', models.CharField(max_length=2000)),
                ('session', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='note', to='school.Session')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('language', models.CharField(blank=True, db_index=True, max_length=200)),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, db_index=True, max_length=50)),
                ('location', models.CharField(blank=True, db_index=True, max_length=50)),
                ('role', models.CharField(blank=True, db_index=True, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('medical_condition', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('language', models.CharField(blank=True, db_index=True, max_length=200)),
                ('student_id', models.CharField(blank=True, db_index=True, max_length=50)),
                ('status', enumfields.fields.EnumField(default='active', enum=school.enums.StudentStatus, max_length=50)),
                ('location', models.CharField(blank=True, db_index=True, max_length=50)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student', to='school.Client')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentClub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('badges', models.ManyToManyField(blank=True, to='school.Badge')),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='club', to='school.Club')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clubs', to='school.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('note', models.CharField(max_length=2000)),
                ('student', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='note', to='school.Student')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('last_name', models.CharField(blank=True, db_index=True, max_length=50)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('language', models.CharField(blank=True, db_index=True, max_length=200)),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, db_index=True, max_length=50)),
                ('location', models.CharField(blank=True, db_index=True, max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('identifier', models.UUIDField(db_index=True, default=uuid.uuid4, unique=True)),
                ('location', models.CharField(max_length=100)),
                ('club', enumfields.fields.EnumField(default='None', enum=school.enums.Clubs, max_length=50)),
                ('duration', models.DecimalField(decimal_places=2, max_digits=5)),
                ('student_amount', models.IntegerField(default=0)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default=None, max_length=100, null=True)),
                ('sales_representative', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trial', to='school.Staff')),
                ('student', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trial', to='school.Student')),
                ('teacher', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trial', to='school.Teacher')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='session',
            name='students',
            field=models.ManyToManyField(blank=True, to='school.Student'),
        ),
        migrations.AddField(
            model_name='session',
            name='teacher',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session', to='school.Teacher'),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='session', to='school.Session'),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student', to='school.Student'),
        ),
        migrations.AddField(
            model_name='campsession',
            name='teacher',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campsession', to='school.Teacher'),
        ),
        migrations.AddField(
            model_name='campsession',
            name='week',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.CampWeek'),
        ),
        migrations.AddField(
            model_name='campbooking',
            name='client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.Client'),
        ),
        migrations.AddField(
            model_name='campbooking',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campbookings', to='school.CampSession'),
        ),
        migrations.AddField(
            model_name='campbooking',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campbookings', to='school.Student'),
        ),
        migrations.AddField(
            model_name='bookingrequest',
            name='client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.Client'),
        ),
        migrations.AddField(
            model_name='bookingrequest',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.Session'),
        ),
        migrations.AddField(
            model_name='bookingrequest',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.Student'),
        ),
        migrations.AddField(
            model_name='booking',
            name='client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.Client'),
        ),
        migrations.AddField(
            model_name='booking',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='school.Session'),
        ),
        migrations.AddField(
            model_name='booking',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='school.Student'),
        ),
        migrations.AddField(
            model_name='user',
            name='client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='school.Client'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='staff',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='school.Staff'),
        ),
        migrations.AddField(
            model_name='user',
            name='teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='school.Teacher'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
